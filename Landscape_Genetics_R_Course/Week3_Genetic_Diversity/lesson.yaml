- Class: meta
  Course: Landscape_Genetics_R_Course
  Lesson: Week3_Genetic_Diversity
  Author: Helene Wagner
  Type: Standard
  Organization: University of Toronto
  Version: 2.4.3

- Class: text
  Output: |-
    Welcome back! Today we will analyse the frog data by population.
    
- Class: cmd_question
  Output: |-
    Check the object type (class) of object 'Frogs'.
  CorrectAnswer: class(Frogs)
  AnswerTests: omnitest(correctExpr='class(Frogs)')
  Hint: |-
    Type: class(Frogs)
    
- Class: cmd_question
  Output: |-
    'Frogs' is a data frame. Use the function 'colnames' to list its variables.
  CorrectAnswer: colnames(Frogs)
  AnswerTests: omnitest(correctExpr='colnames(Frogs)')
  Hint: |-
    Type: colnames(Frogs)

- Class: cmd_question
  Output: |-
    Use the function 'table' to tabulate the variable 'Frogs$Pop'.
  CorrectAnswer:  table(Frogs$Pop)
  AnswerTests: omnitest(correctExpr=' table(Frogs$Pop)')
  Hint: |-
    Type: table(Frogs$Pop)

- Class: cmd_question
  Output: |-
    What is the range of sample sizes per population? Use function 'range'. As argument (inside the brackets), you can paste the expression 'table(Frogs$Pop)'. This is shorter than first defining an object for the tabulation.
  CorrectAnswer:  range(table(Frogs$Pop))
  AnswerTests: omnitest(correctExpr='range(table(Frogs$Pop))')
  Hint: |-
    Type: range(table(Frogs$Pop))
    
- Class: cmd_question
  Output: |-
    The generic function for splitting a data frame by one variable is 'split'. It takes two mandatory arguments, 'x' (a vector or data frame) and 'f' (a grouping variable). We don't need to provide the names of the arguments as long as they are in the expected order. Hence these two lines of code are equivalent (enter one or the other):
    Frogs.by.pop <- split(x = Frogs, f = Frogs$Pop)
    Frogs.by.pop <- split(Frogs, Frogs$Pop)
  CorrectAnswer:  range(table(Frogs$Pop))
  AnswerTests: any_of_exprs('Frogs.by.pop <- split(x = Frogs, f = Frogs$Pop)',
                            'Frogs.by.pop <- split(Frogs, Frogs$Pop)')
  Hint: |-
    Type: Frogs.by.pop <- split(Frogs, Frogs$Pop)
 
 - Class: cmd_question
  Output: |-
    Frogs.by.pop is a list. Each list element is a data frame with the subset of 'Frogs' for one population. 
    
    Use the function 'length' to count how many elements 'Frogs.by.pop' has.
  CorrectAnswer:  length(Frogs.by.pop)
  AnswerTests: omnitest(correctExpr='length(Frogs.by.pop)')
  Hint: |-
    Type: length(Frogs.by.pop)
    
- Class: cmd_question
  Output: |-
    Now we can use 'lapply' to apply any type of function to the list 'Frogs.by.pop'. Use the simple form to apply the function (nrow) to each list element (i.e., each population).
    
    The simple form is: lapply(my_list, my_function)
  CorrectAnswer:  lapply(Frogs.by.pop, nrow)
  AnswerTests: omnitest(correctExpr='lapply(Frogs.by.pop, nrow)')
  Hint: |-
    Type: lapply(Frogs.by.pop, nrow)
    
- Class: cmd_question
  Output: |-
    So this is another way of counting sample size by population. The result is now a list. How do we change this back into a vector? Use 'unlist'. As argument, provide the entire expression 'lapply(Frogs.by.pop, nrow)'.
  CorrectAnswer:  unlist(lapply(Frogs.by.pop, nrow))
  AnswerTests: omnitest(correctExpr='unlist(lapply(Frogs.by.pop, nrow))')
  Hint: |-
    Type: unlist(lapply(Frogs.by.pop, nrow))
        
- Class: cmd_question
  Output: |-
    The function 'sapply' simplifies this. Type: sapply(Frogs.by.pop, nrow)
  CorrectAnswer:  sapply(Frogs.by.pop, nrow)
  AnswerTests: omnitest(correctExpr='sapply(Frogs.by.pop, nrow)')
  Hint: |-
    Type: sapply(Frogs.by.pop, nrow)
    
- Class: cmd_question
  Output: |-
    What if the function returns not a single value per population (list element) but a vector?
    
    Use 'lapply' with the function 'dim' for the list 'Frogs.by.pop'.
  CorrectAnswer:  lapply(Frogs.by.pop, dim)
  AnswerTests: omnitest(correctExpr='lapply(Frogs.by.pop, dim)')
  Hint: |-
    Type: lapply(Frogs.by.pop, dim)
    
- Class: mult_question
  Output: |-
    What do you think will happen if you use 'unlist' on this result?
  AnswerChoices: R returns a table with two columns;R returns a vector;R returns a list;R returns an error message
  CorrectAnswer: R returns a vector
  AnswerTests: omnitest(correctVal="R returns a vector")
  Hint: R returns a vector!    
    
- Class: cmd_question
  Output: |-
    Give it a try!
  CorrectAnswer:  unlist(lapply(Frogs, dim))
  AnswerTests: omnitest(correctExpr='unlist(lapply(Frogs, dim))')
  Hint: |-
    Type: unlist(lapply(Frogs, dim)) 
    
- Class: cmd_question
  Output: |-
    R returns a vector that appends the 'dim' values from each population. Hence the first two values belong to the first population, the third and fourth belong to the second population, etc.
    
    We can use the function 'matrix' to re-organise the 'dim' values in a matrix with 2 columns and 12 rows. Because the results are by row, we use the argument 'byrow=TRUE'.
    
    Type: Dim <- matrix(unlist(lapply(Frogs.by.pop, dim)), nrow=12, ncol=2, byrow=TRUE); Dim
    
    Note: we can use the semicolon ';' to separate two lines of code and write them on the same line.
  CorrectAnswer:  Dim <- matrix(unlist(lapply(Frogs.by.pops, dim)), nrow=12, ncol=2)
  AnswerTests: omnitest(correctExpr='Dim <- matrix(unlist(lapply(Frogs.by.pop, dim)), nrow=12, ncol=2, byrow=TRUE); Dim')
  Hint: |-
    Type: Dim <- matrix(unlist(lapply(Frogs.by.pop, dim)), nrow=12, ncol=2, byrow=TRUE); Dim   
    
- Class: cmd_question
  Output: |-
    Each population data frame has 10 columns, but they have different numbers of rows, which means different numbers of genotyped frogs. However, the table is not very informative without row and column names.
    
    Use function 'dimnames' to add row and column ('dimension') names to 'Dim'. The rownames and column names each are a vector, hence 'dimnames' is a list with two elements. 
    
    Type: dimnames(Dim) <- list(names(Frogs.by.pop), c("n", "columns")); Dim
  CorrectAnswer:  dimnames(Dim) <- dimnames(Dim) <- list(names(Frogs.by.pop), c("n", "columns")); Dim
  AnswerTests: omnitest(correctExpr='dimnames(Dim) <- list(names(Frogs.by.pop), c("n", "columns")); Dim')
  Hint: |-
    Type: dimnames(Dim) <- list(names(Frogs.by.pop), c("n", "columns")); Dim

- Class: cmd_question
  Output: |-
    That was quite a bit of work. Let's see what 'sapply' can do for us.
    
    Use 'sapply' with the function 'dim' on the list 'Frogs.by.pop'.
  CorrectAnswer:  sapply(Frogs.by.pop, dim)
  AnswerTests: omnitest(correctExpr='sapply(Frogs.by.pop, dim)')
  Hint: |-
    Type: sapply(Frogs.by.pop, dim)

- Class: cmd_question
  Output: |-
    That was quite a bit of work. Let's see what 'sapply' can do for us.
    
    Use 'sapply' with the function 'dim' on the list 'Frogs.by.pop'.
  CorrectAnswer:  sapply(Frogs.by.pop, dim)
  AnswerTests: omnitest(correctExpr='sapply(Frogs.by.pop, dim)')
  Hint: |-
    Type: sapply(Frogs.by.pop, dim)

- Class: cmd_question
  Output: |-
    Here the populations are the columns, not the rows, and the dimensions are not labelled. 
    
    Use the function 't' to transpose the matrix, so that the rows become columns and vice versa.
  CorrectAnswer:  t(sapply(Frogs.by.pop, dim))
  AnswerTests: omnitest(correctExpr='t(sapply(Frogs.by.pop, dim))')
  Hint: |-
    Type: t(sapply(Frogs.by.pop, dim))   
    
- Class: cmd_question
  Output: |-
    That looks better.
    
    The first columns is sample size by population. However, this includes the frogs with missing values.
    
    Let's look at the columns 3 through 10 with the loci. Type: Frogs[,3:10]
  CorrectAnswer:  Frogs[,3:10]
  AnswerTests: omnitest(correctExpr='Frogs[,3:10]')
  Hint: |-
    Type: Frogs[,3:10]    
    
- Class: cmd_question
  Output: |-
    To count the number of missing values in each locus, we apply the function 'is.na' to each of columns 3 through 10 of 'Frogs'. This will determine for each entry whether or not it is missing (TRUE or FALSE). What we want is the number of missing values, hence we take the sum. This will count the number of 'TRUE' values.
    
    This means that we need to apply two functions to each column, first 'is.na' and then 'sum'. This means that we can't use the simple form of 'lapply' or 'sapply'. In the generic form, we use 'function(x)' and then specify the functions to be applied to each list element 'x'.

    Type: sapply(Frogs[,3:10], function(x) sum(is.na(x)))
  CorrectAnswer:  sapply(Frogs[,3:10], function(x) sum(is.na(x)))
  AnswerTests: omnitest(correctExpr='sapply(Frogs[,3:10], function(x) sum(is.na(x)))')
  Hint: |-
    Type: sapply(Frogs[,3:10], function(x) sum(is.na(x)))
    
- Class: mult_question
  Output: |-
    What does this result mean?
  AnswerChoices: There are no missing values;R did not recognize the missing values;There are no valid values;R crashed
  CorrectAnswer: R did not recognize the missing values
  AnswerTests: omnitest(correctVal="R did not recognize the missing values")
  Hint: R did not recognize the missing values!  
  
- Class: cmd_question
  Output: |-
    The missing values were coded as "NA:NA", and R did not recognize them. We could tell it to look for this character string.
    
    Type: sapply(Frogs[,3:10], function(x) sum(x == "NA:NA"))
  CorrectAnswer:  sapply(Frogs[,3:10], function(x) sum(x == "NA:NA"))
  AnswerTests: omnitest(correctExpr='sapply(Frogs[,3:10], function(x) sum(x == "NA:NA"))')
  Hint: |-
    Type: sapply(Frogs[,3:10], function(x) sum(x == "NA:NA"))
    
- Class: cmd_question
  Output: |-
    That looks better! However, we want to count the valid sample size, i.e., the number of non-missing values. Change the code accordingly by using '!'.
  CorrectAnswer:  sapply(Frogs[,3:10], function(x) sum(x != "NA:NA"))
  AnswerTests: omnitest(correctExpr='sapply(Frogs[,3:10], function(x) sum(x != "NA:NA"))')
  Hint: |-
    Type: sapply(Frogs[,3:10], function(x) sum(x != "NA:NA"))  
    
- Class: cmd_question
  Output: |-
    Locus 'G' has the most missing values. What is the effective sample size for locus 'G' in each populations? Let's modify the code to find the answer. 
    
    Type: sapply(Frogs.by.pop, function(x) sum(x$G != "NA:NA")) 
    
    Look at the code. Here we select column 'G' from the list 'Frogs.by.pop'. More precisely, we select column 'G' from each list element (i.e., population). Hence we use 'x$G' to indicated that for each list element 'x', the column 'G' should be selected, then the function should be applied to that column.
  CorrectAnswer:  sapply(Frogs.by.pop, function(x) sum(x$G != "NA:NA"))
  AnswerTests: omnitest(correctExpr='sapply(Frogs.by.pop, function(x) sum(x$G != "NA:NA")) ')
  Hint: |-
    Type: sapply(Frogs.by.pop, function(x) sum(x$G != "NA:NA")) 
        
- Class: cmd_question
  Output: |-
    The smallest valid sample size for locus 'G' is 3, for population 'Frog'. That's rather low for population-level analysis!
    
    What about the other loci? To apply the same function to each locus column, we need to use 'lapply' twice. This gets a bit complicated. We use 'x' to refer to each population (element of list 'Frogs.by.pop'). Then we use 'y' to refer to each list element of 'x' (i.e., each column vector). Finally, we use 't' to transpose the resulting matrix.
    
    Type: t(sapply(Frogs.by.pop, function(x) lapply(x[,3:10], function(y) sum(y != "NA:NA"))))
  CorrectAnswer:  t(sapply(Frogs.by.pop, function(x) lapply(x[,3:10], function(y) sum(y != "NA:NA"))))
  AnswerTests: omnitest(correctExpr='t(sapply(Frogs.by.pop, function(x) lapply(x[,3:10], function(y) sum(y != "NA:NA"))))')
  Hint: |-
    Type: t(sapply(Frogs.by.pop, function(x) lapply(x[,3:10], function(y) sum(y != "NA:NA"))))
    
- Class: cmd_question
  Output: |-
    This was rather complicated. Using a dedicated object type like a 'genind' object can simplify such analyses. 
    
    Let's import the Frog data into a 'genind' object.
    
    Type: Frogs.genind <- df2genind(X = Frogs[,3:10], sep = ":", pop = as.factor(Frogs$Pop), NA.char = NA, ploidy = 2, type = "codom"); Frogs.genind
  CorrectAnswer:  Frogs.genind <- df2genind(X = Frogs[,3:10], sep = ":", pop = as.factor(Frogs$Pop), NA.char = NA, ploidy = 2, type = "codom"); Frogs.genind
  AnswerTests: omnitest(correctExpr='Frogs.genind <- df2genind(X = Frogs[,3:10], sep = ":", pop = as.factor(Frogs$Pop), NA.char = NA, ploidy = 2, type = "codom"); Frogs.genind')
  Hint: |-
    Type: Frogs.genind <- df2genind(X = Frogs[,3:10], sep = ":", pop = as.factor(Frogs$Pop), NA.char = NA, ploidy = 2, type = "codom"); Frogs.genind 
    
- Class: cmd_question
  Output: |-
    Instead of using the generic function 'sapply', we can use 'seppop' to split a 'genind' object by its 'pop' variable. Because 'pop' already exists as a slot of the 'genind' object, we don't need to provide it as an argument. 
    
    Type: Frogs.genind.seppop <- seppop(Frogs.genind)
  CorrectAnswer:  Frogs.genind.seppop
  AnswerTests: omnitest(correctExpr='Frogs.genind.seppop')
  Hint: |-
    Type: Frogs.genind.seppop         
  
- Class: cmd_question
  Output: |-
    Use 'sapply' to determine the class of each element of the list 'Frogs.genind.seppop'.
  CorrectAnswer:  sapply(Frogs.genind.seppop, class)
  AnswerTests: omnitest(correctExpr='sapply(Frogs.genind.seppop, class)')
  Hint: |-
    Type: sapply(Frogs.genind.seppop, class)   
    
- Class: cmd_question
  Output: |-
    So, this is a list of 'genind' objects, not a list of data frames. This means that we can't use generic functions like 'dim' that expect a data frame or matrix. On the other hand, there are a range of dedicated functions available for 'genind' objects. 
    
    The function 'prop.typed' takes a 'genind' object and returns the proportion of valid (genotyped) samples, either for each individual (default: by="ind"), or for each locus (by="pop"), or both (by="both").
    
    Type: propTyped(Frogs.genind, by="both")
  CorrectAnswer:  propTyped(Frogs.genind, by="both")
  AnswerTests: omnitest(correctExpr='propTyped(Frogs.genind, by="both")')
  Hint: |-
    Type: propTyped(Frogs.genind, by="both") 
    
- Class: cmd_question
  Output: |-
    What is the object type (class) of the result?
  CorrectAnswer:  class(propTyped(Frogs.genind, by="both"))
  AnswerTests: omnitest(correctExpr='class(propTyped(Frogs.genind, by="both"))')
  Hint: |-
    Type: class(propTyped(Frogs.genind, by="both"))     
    
- Class: cmd_question
  Output: |-
    So, we got a matrix of zero's and one's. Each zero indicates an individual (row) that has missing values at a given locus (column). 
    
    For matrices, we use 'apply' instead of 'lapply' or 'sapply'. With 'apply', we need to indicate whether we apply a function to the rows (MARGIN=1) or columns (MARGIN=2).
    
    Let's use the function 'apply' with 'MARGIN=2' and FUN='mean' to calculate the percent of valid samples per locus. 
  
    Type: apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=mean) 
  CorrectAnswer:  apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=mean) 
  AnswerTests: omnitest(correctExpr='apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=mean) ')
  Hint: |-
    Type: apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=mean) 
    
- Class: cmd_question
  Output: |-
    Modify the code to count the number of valid samples instead of the proportion.
  CorrectAnswer:  apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=sum) 
  AnswerTests: omnitest(correctExpr='apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=sum) ')
  Hint: |-
    Type: apply(propTyped(Frogs.genind, by="both"), MARGIN=2, FUN=sum)    
    
- Class: cmd_question
  Output: |-
    Now use 'sapply' to apply the the same code to each population in 'Frogs.genind.seppop'. Use 't' to transpose the resulting matrix.
    
    Hint: use the construction with 'function(x)', then replace 'Frogs.genind' by 'x'.
  CorrectAnswer:  t(sapply(Frogs.genind.seppop, function(x)  apply(propTyped(x, by="both"), MARGIN=2, FUN=sum))) 
  AnswerTests: omnitest(correctExpr='t(sapply(Frogs.genind.seppop, function(x)  apply(propTyped(x, by="both"), MARGIN=2, FUN=sum))) ')
  Hint: |-
    Type: t(sapply(Frogs.genind.seppop, function(x) apply(propTyped(x, by="both"), MARGIN=2, FUN=sum))) 
      
       
  - Class: mult_question
  Output: |-
    That's quite an achievement! Hopefully, you have gained an appreciation of what 'lapply' and its related functions 'sapply' and 'apply' can do for you, and feel confident that you can tease apart code that uses 'lapply', or put it together yourself when needed.
    
    Would you like to submit the log of your tutorial session to Google Forms so that your instructor may evaluate your progress? If 'yes', please fill and submit the form that will open. 
    
    Please note that you can submit multiple attempts and the best attempt will be graded. You will receive full marks as long as you answered all questions (i.e. did not use 'skip'). If you used 'skip' because you could not answer a question, please contact your instructor for advice.
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: selective_submit()
  Hint: 
    
