- Class: meta
  Course: Landscape_Genetics_R_Course
  Lesson: Week2_Manipulating_Spatial_Data
  Author: Helene Wagner
  Type: Standard
  Organization: University of Toronto
  Version: 2.4.3

- Class: text
  Output: |-
    Welcome back! Today we will aggregate the frog data ('Frogs') by site, combine them with a site data set ('Sites') and extract additional site data from raster maps ('RasterMaps'). 
    
    You will learn how to manipulate data with the package 'dplyr', how to convert them into a SpatialPointsDataFrame, and how to extract values from a raster.
    
- Class: cmd_question
  Output: |-
    View the data in object 'Frogs'.
  CorrectAnswer: View(Frogs)
  AnswerTests: omnitest(correctExpr='View(Frogs)')
  Hint: |-
    Type: View(Frogs)


- Class: cmd_question
  Output: |-
    The column 'SiteName' in the data frame 'Frogs' is currently a 'factor'. Use 'as.character()' to change it to 'character'. This will help joining data frames later on:
  
    Frogs$SiteName <- as.character(Frogs$SiteName)
  CorrectAnswer: Frogs$SiteName <- as.character(Frogs$SiteName)
  AnswerTests: omnitest(correctExpr='Frogs$SiteName <- as.character(Frogs$SiteName)')
  Hint: |-
    Type: Frogs$SiteName <- as.character(Frogs$SiteName)
    
- Class: mult_question
  Output: |-
    So we have multiple frogs per site, 181 in total, and eight loci per frog, though some of them are missing ("NA:NA"). Let's find out how many frogs without missing values we have per site. 
    
    The package 'dplyr' provides an easy to use way for data manipulation in R, once you get the hang of it. 
    
    What do you think 'dplyr' might stand for?
  AnswerChoices: Deploy R;Dataframe pliers;Deplorables;Deeply rotten
  CorrectAnswer: Dataframe pliers
  AnswerTests: omnitest(correctVal="Dataframe pliers")
  Hint: Dataframe pliers!
    
- Class: cmd_question
  Output: |-
    To manipulate data with 'dplyr', we construct something like a sentence. The most important "word" is '%>%', which translates to "then do the following".
    
    The code below means "Take the data frame 'Frogs', then group it by SiteName, then summarize it by calculating a new variable 'nFrogs' as the number of observations". (Note: the function 'n()' returns a count). Give it a try!
    
    Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
  CorrectAnswer: Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())')
  Hint: |-
    Type: Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
    
- Class: cmd_question
  Output: |-
    Is this cool or not? Please write the results into a new object 'FrogSites'.

  CorrectAnswer: FrogSites <- Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='FrogSites <- Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())')
  Hint: |-
    Type: FrogSites <- Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
    
- Class: cmd_question
  Output: |-
    Next we want to filter out those frogs that have "NA:NA" at any locus. Let's build this up in a few steps.
    
    First, use a logical expression to test for each frog whether it has "NA:NA" at locus A. Note: the double '==' indicates a logical expression 'is equal to', to which the answer is either True or False. This is different in R from '=', which is largely a synonym for '<-' (which is used to write the expression on the right into the object on the left). Type: 
    
    Frogs$A == "NA:NA"
  CorrectAnswer: Frogs$A == "NA:NA"
  AnswerTests: omnitest(correctExpr='Frogs$A == "NA:NA"')
  Hint: |-
    Type: Frogs$A == "NA:NA"
        
- Class: cmd_question
  Output: |-
    This returned a logical vector (True / False) that can be interpreted numerically (True = 1, False = 0). This means we can count how many frogs have "NA:NA" at locus A by taking the sum:
    
    sum(Frogs$A == "NA:NA")
  CorrectAnswer: sum(Frogs$A == "NA:NA")
  AnswerTests: omnitest(correctExpr='sum(Frogs$A == "NA:NA")')
  Hint: |-
    Type: sum(Frogs$A == "NA:NA")
    
- Class: cmd_question
  Output: |-
    To calculate the complement (the opposite: how many frogs do NOT have "NA:NA" at locus A), we replace '==' (is equal) by '!=' (is not equal). 
    Similary, '>' means 'is larger than' and '!>' means "is not larger than", which is the same as '<=' (is smaller or equal).
    
    Modify the code to calculate how many frogs had valid genotypes (not "NA:NA") at locus B.
    
    Note: You can use the 'up' arrow key on your keyboard to bring up the previous command(s), then modify it.
    
  CorrectAnswer: sum(Frogs$B != "NA:NA")
  AnswerTests: omnitest(correctExpr='sum(Frogs$B != "NA:NA")')
  Hint: |-
    Type: sum(Frogs$B != "NA:NA")
            
    
- Class: cmd_question
  Output: |-
    We can build this into our 'dplyr' sentence to filter by valid genotype before counting the frogs:
    
    Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())
  CorrectAnswer: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())')
  Hint: |-
    Type: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())
          
- Class: cmd_question
  Output: |-
    OK, we filtered for locus A but the frogs could also have missing values at loci B - H. We can combine multiple conditions in filter() by combining them with '&' (AND) or '|' (OR). For example, filter(A != "NA:NA" & B != "NA:NA") keeps all frogs that have valid genotypes at both loci and thus eliminates those that have "NA:NA" either at A or at B or at both loci. In contrast, filter(A != "NA:NA" | B != "NA:NA") keeps all frogs that have at least one valid genotype at locus A or B (or both), and eliminates only those frogs that have "NA:NA" at both loci.
    
    So how would you count those frogs (in each site) that have valid genotypes at all three loci A, B and C?
  CorrectAnswer: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA" & B != "NA:NA" & C != "NA:NA") %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA" & B != "NA:NA" & C != "NA:NA") %>% summarize(nFrogs = n())')
  Hint: |-
    Type: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA" & B != "NA:NA" & C != "NA:NA") %>% summarize(nFrogs = n())
          

- Class: cmd_question
  Output: |-
    Admittedly, the code gets a bit long with eight loci A - H. Here's how we would write the counts into a new object 'FrogSitesComplete':
  
    FrogSitesComplete <- Frogs %>% filter(A != "NA:NA" & B != "NA:NA"  & C != "NA:NA" & D != "NA:NA"  & E != "NA:NA"  & F != "NA:NA"  & G != "NA:NA" & H != "NA:NA" ) %>% group_by(SiteName) %>% summarize(nFrogsComplete = n())
    
    Type 'skip()' (without quotes) to have the system enter the code for you (this time only, it won't affect your completion mark).
  CorrectAnswer: FrogSitesComplete <- Frogs %>% filter(A != "NA:NA" & B != "NA:NA"  & C != "NA:NA" & D != "NA:NA"  & E != "NA:NA"  & F != "NA:NA"  & G != "NA:NA" & H != "NA:NA" ) %>% group_by(SiteName) %>% summarize(nFrogsComplete = n())
  AnswerTests: FrogSitesComplete <- Frogs %>% filter(A != "NA:NA" & B != "NA:NA"  & C != "NA:NA" & D != "NA:NA"  & E != "NA:NA"  & F != "NA:NA"  & G != "NA:NA" & H != "NA:NA" ) %>% group_by(SiteName) %>% summarize(nFrogsComplete = n())
  Hint: |-
    Type: skip()
  
- Class: cmd_question
  Output: |-
    Next, combine both counts, with and without frogs with missing genotype data at any locus, into a single table.
    
    Technically we want to merge the two data frames 'FrogSites' and 'FrogSitesComplete'. A simple way of doing so is: 
    
    FrogSites <-merge(FrogSites, FrogSitesComplete)
  CorrectAnswer: FrogSites <-merge(FrogSites, FrogSitesComplete)
  AnswerTests: omnitest(correctExpr='FrogSites <-merge(FrogSites, FrogSitesComplete)')
  Hint: |-
    Type: FrogSites <-merge(FrogSites, FrogSitesComplete)
     
- Class: cmd_question
  Output: |-
    View the updated object 'FrogSites' (and verify that it has two count columns).
    
  CorrectAnswer: View(FrogSites)
  AnswerTests: omnitest(correctExpr='View(FrogSites)')
  Hint: |-
    Type: View(FrogSites)
     
- Class: cmd_question
  Output: |-
    An object 'Sites' with the site data (for 31 sites) is already available as a SpatialPointsDataFrame. This is an S4 object with slots that are accessed with '@'. The attribute table is in slot @data. 
    
    Check the object type (class) of the attribute table of 'Sites'.
  CorrectAnswer: class(Sites@data)
  AnswerTests: omnitest(correctExpr='class(Sites@data)')
  Hint: |-
    Type: class(Sites@data)
    
- Class: cmd_question
  Output: |-
    Hm, interesting: 'Sites' is an S4 object with slots (use '@'), and its slot '@data' is a data.frame and thus an S3 object, whose columns are accessed with '$'. 
    
    Can you get R to display the column 'SiteName' in the 'data' slot of 'Sites?
  CorrectAnswer: Sites@data$SiteName
  AnswerTests: omnitest(correctExpr='Sites@data$SiteName')
  Hint: |-
    Type: Sites@data$SiteName    

- Class: mult_question
  Output: Which site would you want to visit for a swim?
  AnswerChoices: BachelorMeadow;EggWhiteLake;GoldenLake;InandOutLake;SkyhighLake
  CorrectAnswer: NULL
  AnswerTests: 1 == 1
  Hint: Your choice!
  
- Class: cmd_question
  Output: |-
    The next task is to add the site data from 'Sites@data' to 'FrogSites'. Note that we don't have genetic data for all sites, hence there are more rows in 'Sites' (31) than in 'FrogSites' (12).
    
    We will use 'dplyr' again to do a 'left-join', where the relevant information from the 'right' data frame is added to the rows in the 'left' data frame. Both have the same ID column 'SiteName', so we would not necessarily have to specify the 'by' columns but we'll do it anyways. 
    
    The 'dplyr' sentence is "take data frame 'FrogSites' and add columns from data frame 'Sites@data'. Match rows based on column 'SiteName' in 'FrogSites' and column 'SiteName' in 'Sites'."
    
    FrogSites <- FrogSites %>% left_join(Sites@data, by = c("SiteName" = "SiteName"))
  CorrectAnswer: FrogSites <- FrogSites %>% left_join(Sites@data, by = c("SiteName" = "SiteName"))
  AnswerTests: omnitest(correctExpr='FrogSites <- FrogSites %>% left_join(Sites@data, by = c("SiteName" = "SiteName"))') 
  Hint: |-
    Type: FrogSites <- FrogSites %>% left_join(Sites@data, by = c("SiteName" = "SiteName")). If using copy-paste, make sure to delete any '|' symbol.   
  
- Class: cmd_question
  Output: |-
    OK, we got the site data, but we're still missing the coordinates. R must have stowed them in a different slot. Let's see whether 'names(Sites)' gives us a list of slots? The function 'names()' is one of these generic functions that do different things for different object classes. For a data.frame, it will list the variable names, for a list, the names of the list elements (if any), and for a matrix, nothing!
    
    Type: names(Sites)
  CorrectAnswer: names(Sites)
  AnswerTests: omnitest(correctExpr='names(Sites)')
  Hint: |-
    Type: names(Sites)
    
- Class: cmd_question
  Output: |-
    Hm, looks like for a SpatialPointsDataFrame, 'names()' returns the variable names from the @data slot.
    
    To see a list of the slot names, use the function 'slotNames()'.
  CorrectAnswer: slotNames(Sites)
  AnswerTests: omnitest(correctExpr='slotNames(Sites)')
  Hint: |-
    Type: slotNames(Sites)
        
- Class: cmd_question
  Output: |-
    Looks like 'coords' might be the slot we are looking for. We will need to know the column names of the coordinates. Use the function 'head' to show the first few lines. 
  CorrectAnswer: head(Sites@coords)
  AnswerTests: omnitest(correctExpr='head(Sites@coords)')
  Hint: |-
    Type: head(Sites@coords). This is an S4 object hence we use '@'.
    
    
- Class: cmd_question
  Output: |-
    Before we can do another left-join to add the coordinates to FrogSites, we need to have a column with the site names (for matching the rows). 
    
    We can use 'data.frame()' to combine the column Sites@data$SiteName and the matrix 'Sites@coords' into a new data frame 'SiteCoords'. This is safe to do because the two have the exact same rows. 
    
    Detail: here we explicitly tell R to name the first column 'SiteName', otherwise it might call it 'Sites.data.SiteName', thus combining the data frame and variable names of the source. Type:
    
    SiteCoords <- data.frame(SiteName = Sites@data$SiteName, Sites@coords, stringsAsFactors=FALSE)
  CorrectAnswer: SiteCoords <- data.frame(SiteName = Sites@data$SiteName, Sites@coords, stringsAsFactors=FALSE)
  AnswerTests: omnitest(correctExpr='SiteCoords <- data.frame(SiteName = Sites@data$SiteName, Sites@coords, stringsAsFactors=FALSE)')
  Hint: |-
    Type: SiteCoords <- data.frame(SiteName = Sites@data$SiteName, Sites@coords, stringsAsFactors=FALSE)
    
- Class: cmd_question
  Output: |-
    Now go ahead and perform a left-join to add the columns in 'SiteCoords' to 'FrogSites'. Name the output object 'FrogSites.sp'. Omit the 'by' argument as both data frames have a column with the same name. 
  CorrectAnswer: FrogSites.sp <- FrogSites %>% left_join(SiteCoords)   
  AnswerTests: omnitest(correctExpr='FrogSites.sp <- FrogSites %>% left_join(SiteCoords)')
  Hint: |-
    Type: FrogSites.sp <- FrogSites %>% left_join(SiteCoords)
        
- Class: cmd_question
  Output: |-
    Great! Let's turn 'it'FrogSites.sp' into a SpatialPointsDataFrame. The function 'coordinates' is not very intuitive, and it alters the input object dramatically without the option to give the output object a new name.
    
    The code is actually a formula and translates roughly like this: "Model the spatial data in 'FrogSites.sp' as a function of the coordinates in columns 'coords.x1' and 'coords.x2'."
    
    coordinates(FrogSites.sp) <- ~coords.x1 + coords.x2
  CorrectAnswer: coordinates(FrogSites.sp) <- ~coords.x1 + coords.x2   
  AnswerTests: omnitest(correctExpr='coordinates(FrogSites.sp) <- ~coords.x1 + coords.x2')
  Hint: |-
    Type: coordinates(FrogSites.sp) <- ~coords.x1 + coords.x2
    
- Class: cmd_question
  Output: |-
    Before we can plot the sites in space, we need to add a projection string to tell R where on earth this is.
    
    Because we took the coordinates from 'Sites', we will copy its projection string:
    
    proj4string(FrogSites.sp) <- proj4string(Sites)
  CorrectAnswer: proj4string(FrogSites.sp) <- proj4string(Sites)   
  AnswerTests: omnitest(correctExpr='proj4string(FrogSites.sp) <- proj4string(Sites)')
  Hint: |-
    proj4string(FrogSites.sp) <- proj4string(Sites)
    
    
- Class: cmd_question
  Output: |-
    Display the slot @proj4string of 'FrogSites.sp'.
    
  CorrectAnswer: FrogSites.sp@proj4string    
  AnswerTests: omnitest(correctExpr='FrogSites.sp@proj4string')
  Hint: |-
    Type: FrogSites.sp@proj4string
        
- Class: cmd_question
  Output: |-
    Good thing we did not have to type this. Now we can plot the sites in space! The function 'plot()' is another generic function that does different things for different object types. Let's see what it does for our SpatialPointsDataFrame:
    
    plot(FrogSites.sp)
  CorrectAnswer: plot(FrogSites.sp)
  AnswerTests: omnitest(correctExpr='plot(FrogSites.sp)')
  Hint: |-
    Type: plot(FrogSites.sp) 
    
- Class: cmd_question
  Output: |-
    A bubble plot of the number of frogs with complete genotypes would be more interesting though:
    
    bubble(FrogSites.sp, 'nFrogsComplete', fill=FALSE)
  CorrectAnswer: bubble(FrogSites.sp, 'nFrogsComplete', fill=FALSE)
  AnswerTests: omnitest(correctExpr='bubble(FrogSites.sp, "nFrogsComplete", fill=FALSE)')
  Hint: |-
    Type: bubble(FrogSites.sp, 'nFrogsComplete', fill=FALSE) 
    
- Class: cmd_question
  Output: |-
    The final step is to extract values from the raster maps in stack 'RasterMaps' (which has already been loaded) at the twelve sites where the frogs were sampled.
    
    With a SpatialPointsDataFrame, this is surprisingly easy. Type:
    
    extract(RasterMaps, FrogSites.sp)
  CorrectAnswer: extract(RasterMaps, FrogSites.sp)
  AnswerTests: omnitest(correctExpr='extract(RasterMaps, FrogSites.sp)')
  Hint: |-
    Type: extract(RasterMaps, FrogSites.sp)
   
    
- Class: cmd_question
  Output: |-
    To add this to the attribute table of FrogSites.sp, we can use the function 'data.frame()' again because we know for sure that they have the exact same rows.
    
    FrogSites.sp@data <- data.frame(FrogSites.sp@data, extract(RasterMaps, FrogSites.sp))
  CorrectAnswer: FrogSites.sp@data <- data.frame(FrogSites.sp@data, extract(RasterMaps, FrogSites.sp))
  AnswerTests: omnitest(correctExpr='FrogSites.sp@data <- data.frame(FrogSites.sp@data, extract(RasterMaps, FrogSites.sp))')
  Hint: |-
    Type: FrogSites.sp@data <- data.frame(FrogSites.sp@data, extract(RasterMaps, FrogSites.sp))    

    
- Class: cmd_question
  Output: |-
    One variable we just added is 'nlcd', the land cover class. The code '42' indicates 'Evergreen Forest'. How many of the 12 sites with genetic data were in the forest? First, have R print the variable 'nlcd' from the attribute table of 'FrogSites.sp'. 
  CorrectAnswer: FrogSites.sp@data$nlcd 
  AnswerTests: omnitest(correctExpr='FrogSites.sp@data$nlcd')
  Hint: |-
    Type: FrogSites.sp@data$nlcd 
    
- Class: cmd_question
  Output: |-
    Remember how we do a logical test? Test for each site whether it has the value 42 in column nlcd.
    
  CorrectAnswer: (FrogSites.sp@data$nlcd == 42) 
  AnswerTests: omnitest(correctExpr='FrogSites.sp@data$nlcd == 42')
  Hint: |-
    Type: FrogSites.sp@data$nlcd == 42  
    
- Class: cmd_question
  Output: |-
    Finally, count how many sites are in the forest (i.e., how many tests were 'TRUE').
    
  CorrectAnswer: sum(FrogSites.sp@data$nlcd == 42) 
  AnswerTests: omnitest(correctExpr='sum(FrogSites.sp@data$nlcd == 42) ')
  Hint: |-
    Type: sum(FrogSites.sp@data$nlcd == 42)  
    
- Class: mult_question
  Output: |-
    You did it!
    
    Would you like to submit the log of your tutorial session to Google Forms so that your instructor may evaluate your progress? If 'yes', please fill and submit the form that will open. 
    
    Please note that you can submit multiple attempts and the best attempt will be graded. You will receive full marks as long as you answered all questions (i.e. did not use 'skip'). If you used 'skip' because you could not answer a question, please contact your instructor for advice.
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: selective_submit()
  Hint: 
  
    
     


