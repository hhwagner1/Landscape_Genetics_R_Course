- Class: meta
  Course: Landscape_Genetics_R_Course
  Lesson: Week2_Manipulating_Spatial_Data
  Author: Helene Wagner
  Type: Standard
  Organization: University of Toronto
  Version: 2.4.3

- Class: text
  Output: |-
    Welcome back! Today we will aggregate the frog data ('Frogs') by site, combine them with a site data set ('Sites') and extract additional site data from raster maps ('RasterMaps'). 
    
    You will learn how to manipulate data with the package 'dplyr', how to convert them into an 'sf' object, and how to extract values from a raster.
    
- Class: cmd_question
  Output: |-
    View the data in object 'Frogs'.
  CorrectAnswer: View(Frogs)
  AnswerTests: omnitest(correctExpr='View(Frogs)')
  Hint: |-
    Type: View(Frogs)


- Class: cmd_question
  Output: |-
    The column 'SiteName' in the data frame 'Frogs' is currently a 'factor'. Use 'as.character()' to change it to 'character'. This will help joining data frames later on:
  
    Frogs$SiteName <- as.character(Frogs$SiteName)
  CorrectAnswer: Frogs$SiteName <- as.character(Frogs$SiteName)
  AnswerTests: omnitest(correctExpr='Frogs$SiteName <- as.character(Frogs$SiteName)')
  Hint: |-
    Type: Frogs$SiteName <- as.character(Frogs$SiteName)
    
- Class: mult_question
  Output: |-
    So we have multiple frogs per site, 181 in total, and eight loci per frog, though some of them are missing ("NA:NA"). Let's find out how many frogs without missing values we have per site. 
    
    The package 'dplyr' provides an easy to use way for data manipulation in R, once you get the hang of it. 
    
    What do you think 'dplyr' might stand for?
  AnswerChoices: Deploy R;Dataframe pliers;Deplorables;Deeply rotten
  CorrectAnswer: Dataframe pliers
  AnswerTests: omnitest(correctVal="Dataframe pliers")
  Hint: Dataframe pliers!
    
- Class: cmd_question
  Output: |-
    To manipulate data with 'dplyr', we construct something like a sentence. The most important "word" is '%>%', which translates to "then do the following".
    
    The code below means "Take the data frame 'Frogs', then group it by SiteName, then summarize it by calculating a new variable 'nFrogs' as the number of observations". (Note: the function 'n()' returns a count). Give it a try!
    
    Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
  CorrectAnswer: Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())')
  Hint: |-
    Type: Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
    
- Class: cmd_question
  Output: |-
    Is this cool or not? Please write the results into a new object 'FrogSites'.

  CorrectAnswer: FrogSites <- Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='FrogSites <- Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())')
  Hint: |-
    Type: FrogSites <- Frogs %>% group_by(SiteName) %>% summarize(nFrogs = n())
    
- Class: cmd_question
  Output: |-
    Next we want to filter out those frogs that have "NA:NA" at any locus. Let's build this up in a few steps.
    
    First, use a logical expression to test for each frog whether it has "NA:NA" at locus A. Note: the double '==' indicates a logical expression 'is equal to', to which the answer is either TRUE or FALSE. This is different in R from '=', which is largely a synonym for '<-' (which is used to write the expression on the right into the object on the left). 
    
    Type: Frogs$A == "NA:NA"
  CorrectAnswer: Frogs$A == "NA:NA"
  AnswerTests: omnitest(correctExpr='Frogs$A == "NA:NA"')
  Hint: |-
    Type: Frogs$A == "NA:NA"
        
- Class: cmd_question
  Output: |-
    This returned a logical vector (TRUE/FALSE) that can be interpreted numerically (TRUE = 1, FALSE = 0). This means we can count how many frogs have "NA:NA" at locus A by taking the sum:
    
    sum(Frogs$A == "NA:NA")
  CorrectAnswer: sum(Frogs$A == "NA:NA")
  AnswerTests: omnitest(correctExpr='sum(Frogs$A == "NA:NA")')
  Hint: |-
    Type: sum(Frogs$A == "NA:NA")
    
- Class: cmd_question
  Output: |-
    To calculate the complement (the opposite: how many frogs do NOT have "NA:NA" at locus A), we replace '==' (is equal) by '!=' (is not equal). 
    Similary, '>' means 'is larger than' and '!>' means "is not larger than", which is the same as '<=' (is smaller or equal).
    
    Modify the code to calculate how many frogs had valid genotypes (not "NA:NA") at locus B.
    
    Note: You can use the 'up' arrow key on your keyboard to bring up the previous command(s), then modify it.
    
  CorrectAnswer: sum(Frogs$B != "NA:NA")
  AnswerTests: omnitest(correctExpr='sum(Frogs$B != "NA:NA")')
  Hint: |-
    Type: sum(Frogs$B != "NA:NA")
            
    
- Class: cmd_question
  Output: |-
    We can build this into our 'dplyr' sentence to filter by valid genotype before counting the frogs:
    
    Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())
  CorrectAnswer: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())')
  Hint: |-
    Type: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA") %>% summarize(nFrogs = n())
          
- Class: cmd_question
  Output: |-
    OK, we filtered for locus A but the frogs could also have missing values at loci B - H. We can combine multiple conditions in filter() by combining them with '&' (AND) or '|' (OR). For example, filter(A != "NA:NA" & B != "NA:NA") keeps all frogs that have valid genotypes at both loci and thus eliminates those that have "NA:NA" either at A or at B or at both loci. In contrast, filter(A != "NA:NA" | B != "NA:NA") keeps all frogs that have at least one valid genotype at locus A or B (or both), and eliminates only those frogs that have "NA:NA" at both loci.
    
    So how would you count those frogs (in each site) that have valid genotypes at the two loci A and B?
  CorrectAnswer: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA" & B != "NA:NA") %>% summarize(nFrogs = n())
  AnswerTests: omnitest(correctExpr='Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA" & B != "NA:NA") %>% summarize(nFrogs = n())')
  Hint: |-
    Type: Frogs %>% group_by(SiteName) %>% filter(A != "NA:NA" & B != "NA:NA") %>% summarize(nValid = n())
          

- Class: cmd_question
  Output: |-
    Admittedly, the code gets a bit long with eight loci A - H. Here we use a different way to select only those rows that don't contain "NA:NA":
  
    FrogSitesComplete <- Frogs %>% filter(apply(Frogs[,3:10]=="NA:NA", 1, sum)==0)  %>% group_by(SiteName) %>% summarize(nComplete = n())
    
    Type 'skip()' (without quotes) to have the system enter the code for you (this time only, it won't affect your completion mark).
  CorrectAnswer: FrogSitesComplete <- Frogs %>% filter(apply(Frogs[,3:10]=="NA:NA", 1, sum)==0)  %>% group_by(SiteName) %>% summarize(nComplete = n())
  AnswerTests: (FrogSitesComplete <- Frogs %>% filter(apply(Frogs[,3:10]=="NA:NA", 1, sum)==0)  %>% group_by(SiteName) %>% summarize(nComplete = n()))
  Hint: |-
    Type: skip()
  
- Class: cmd_question
  Output: |-
    Next, combine both counts, with and without frogs with missing genotype data at any locus, into a single table.
    
    Technically we want to merge the two data frames 'FrogSites' and 'FrogSitesComplete'. A simple way of doing so is: 
    
    FrogSites <-merge(FrogSites, FrogSitesComplete)
  CorrectAnswer: FrogSites <-merge(FrogSites, FrogSitesComplete)
  AnswerTests: omnitest(correctExpr='FrogSites <-merge(FrogSites, FrogSitesComplete)')
  Hint: |-
    Type: FrogSites <-merge(FrogSites, FrogSitesComplete)
     
- Class: cmd_question
  Output: |-
    View the updated object 'FrogSites' (and verify that it has two count columns).
    
  CorrectAnswer: View(FrogSites)
  AnswerTests: omnitest(correctExpr='View(FrogSites)')
  Hint: |-
    Type: View(FrogSites)

- Class: mult_question
  Output: Which site would you want to visit for a swim?
  AnswerChoices: BachelorMeadow;EggWhiteLake;GoldenLake;InandOutLake;SkyhighLake
  CorrectAnswer: NULL
  AnswerTests: 1 == 1
  Hint: Your choice!
  
- Class: cmd_question
  Output: |-
    An 'sf' object 'Sites' with the site data (for 31 sites) is already available. The next task is to add the site data from 'Sites' to 'FrogSites'. Note that we don't have genetic data for all sites, hence there are more rows in 'Sites' (31) than in 'FrogSites' (12).
    
    However, before we can do this, we need to split the 'sf' object into two parts: the spatial coordinates, and the attribute data. 
    
    Type this to write the spatial coordinates into a separate data frame:
    
    Coordinates <- st_coordinates(Sites)
  CorrectAnswer: Coordinates <- st_coordinates(Sites)
  AnswerTests: omnitest(correctExpr='Coordinates <- st_coordinates(Sites)') 
  Hint: |-
    Type: Coordinates <- st_coordinates(Sites)
    
- Class: cmd_question
  Output: |-
    Type this to write the attribute data into a separate data frame:
    
    Data <- st_drop_geometry(Sites)
  CorrectAnswer: Data <- st_drop_geometry(Sites)
  AnswerTests: omnitest(correctExpr='Data <- st_drop_geometry(Sites)') 
  Hint: |-
    Type: Data <- st_drop_geometry(Sites)
    
- Class: cmd_question
  Output: |-
    Now, we can combine the two data frames into a single data frame. 
    
    Type: data.frame(Data, Coordinates)
  CorrectAnswer: data.frame(Data, Coordinates)
  AnswerTests: omnitest(correctExpr='data.frame(Data, Coordinates)') 
  Hint: |-
    Type: data.frame(Data, Coordinates)
    
- Class: cmd_question
  Output: |-
    Check the output. The spatial coordinates are now listed as two variables X and Y. 
    
    We will use 'dplyr' again to do a 'left-join', where the relevant information from the 'right' data frame is added to the rows in the 'left' data frame. Both have the same ID column 'SiteName', so we would not necessarily have to specify the 'by' columns but we'll do it anyways. 
    
    The 'dplyr' sentence is "take data frame 'FrogSites' and add columns from data frame 'Sites'. Match rows based on column 'SiteName' in 'FrogSites' and column 'SiteName' in 'Sites'."
    
    FrogSites <- FrogSites %>% left_join(data.frame(Data, Coordinates), by = c("SiteName" = "SiteName"))
  CorrectAnswer: FrogSites <- FrogSites %>% left_join(data.frame(Data, Coordinates), by = c("SiteName" = "SiteName"))
  AnswerTests: omnitest(correctExpr='FrogSites <- FrogSites %>% left_join(data.frame(Data, Coordinates), by = c("SiteName" = "SiteName"))') 
  Hint: |-
    Type: FrogSites <- FrogSites %>% left_join(data.frame(Data, Coordinates), by = c("SiteName" = "SiteName")). If using copy-paste, make sure to delete any '|' symbol.   
    
- Class: cmd_question
  Output: |-
    Great! Let's turn 'FrogSites' into an 'sf' object. We will need to specify the variables with the spatial coordinates.

    Type: FrogSites.sf <- st_as_sf(FrogSites, coords=c("X", "Y"))
  CorrectAnswer: FrogSites.sf <- st_as_sf(FrogSites, coords=c("X", "Y"))   
  AnswerTests: omnitest(correctExpr='FrogSites.sf <- st_as_sf(FrogSites, coords=c("X", "Y"))')
  Hint: |-
    Type: FrogSites.sf <- st_as_sf(FrogSites, coords=c("X", "Y"))
    
- Class: cmd_question
  Output: |-
    Before we can plot the sites in space, we need to define the coordinate reference system (CRS) to tell R where on Earth this is.
    
    Because we took the coordinates from 'Sites', we will copy its CRS. 
    
    Type: st_crs(FrogSites.sf) <- st_crs(Sites)
  CorrectAnswer: st_crs(FrogSites.sf) <- st_crs(Sites)   
  AnswerTests: omnitest(correctExpr='st_crs(FrogSites.sf) <- st_crs(Sites)')
  Hint: |-
    Type: st_crs(FrogSites.sf) <- st_crs(Sites)
        
- Class: cmd_question
  Output: |-
    Now we can plot the sites in space! The function 'plot()' is another generic function that does different things for different object types. 
    
    To plot the variable 'nValid' in space, type:
    
    plot(FrogSites.sf["nComplete"])
  CorrectAnswer: plot(FrogSites.sf["nComplete"])
  AnswerTests: omnitest(correctExpr='plot(FrogSites.sf["nComplete"])')
  Hint: |-
    Type: plot(FrogSites.sf["nComplete"])
    
- Class: cmd_question
  Output: |-
    The final step is to extract values from the raster maps 'RasterMaps' (which has already been loaded) at the twelve sites where the frogs were sampled.
    
    With an 'sf' object, this is surprisingly easy. Type:
    
    extract(RasterMaps, FrogSites.sf, bind=TRUE)
  CorrectAnswer: extract(RasterMaps, FrogSites.sf, bind=TRUE)
  AnswerTests: omnitest(correctExpr='extract(RasterMaps, FrogSites.sf, bind=TRUE)')
  Hint: |-
    Type: extract(RasterMaps, FrogSites.sf, bind=TRUE)
   
- Class: mult_question
  Output: |-
    Check the output. What object type (class) is the resulting data set?
  AnswerChoices: A data.frame;An sf object;A SpatRaster object (package terra);A SpatVector object (package terra)
  CorrectAnswer: A SpatVector object (package terra)
  AnswerTests: omnitest(correctVal="A SpatVector object (package terra)")
  Hint: A SpatVector object (package terra)
  
- Class: cmd_question
  Output: |-
    Let's extract the raster data at the sampling points and convert the result back to an 'sf' object. 
    
    Type: FrogSites.sf <- st_as_sf(extract(RasterMaps, FrogSites.sf, bind=TRUE))
  CorrectAnswer: FrogSites.sf <- st_as_sf(extract(RasterMaps, FrogSites.sf, bind=TRUE))
  AnswerTests: omnitest(correctExpr='FrogSites.sf <- st_as_sf(extract(RasterMaps, FrogSites.sf, bind=TRUE))')
  Hint: |-
    Type: FrogSites.sf <- st_as_sf(extract(RasterMaps, FrogSites.sf, bind=TRUE))  
    
- Class: cmd_question
  Output: |-
    One variable we just added is 'nlcd', the land cover class. The code '42' indicates 'Evergreen Forest'. How many of the 12 sites with genetic data were in the forest? 
    
    First, have R print the variable 'nlcd' from 'FrogSites.sf'. 
  CorrectAnswer: FrogSites.sf$nlcd 
  AnswerTests: omnitest(correctExpr='FrogSites.sf$nlcd')
  Hint: |-
    Type: FrogSites.sf$nlcd 
    
- Class: cmd_question
  Output: |-
    Remember how we do a logical test? Test for each site whether it has the value 42 in column nlcd.
    
  CorrectAnswer: FrogSites.sf$nlcd == 42 
  AnswerTests: omnitest(correctExpr='FrogSites.sf$nlcd == 42')
  Hint: |-
    Type: FrogSites.sf$nlcd == 42  
    
- Class: cmd_question
  Output: |-
    Finally, count how many sites are in the forest (i.e., how many tests were 'TRUE').
    
  CorrectAnswer: sum(FrogSites.sf$nlcd == 42) 
  AnswerTests: omnitest(correctExpr='sum(FrogSites.sf$nlcd == 42) ')
  Hint: |-
    Type: sum(FrogSites.sf$nlcd == 42)  
    
- Class: mult_question
  Output: |-
    You did it!
    
    Would you like to submit the log of your tutorial session to Google Forms so that your instructor may evaluate your progress? If 'yes', please fill and submit the form that will open. 
    
    Please note that you can submit multiple attempts and the best attempt will be graded. You will receive full marks as long as you answered all questions (i.e. did not use 'skip'). If you used 'skip' because you could not answer a question, please contact your instructor for advice.
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: selective_submit()
  Hint: 
  
    
     


